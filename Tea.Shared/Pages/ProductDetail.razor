@rendermode @(AppDomain.CurrentDomain.FriendlyName.Contains("Tea.Web") ? Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveServer : null)
@page "/product/{BeverageId:int}"
@using Tea.Shared.Services
@using Tea.Shared.Models
@using Tea.Shared.Components
@inject LanguageService LanguageService
@inject BeverageService BeverageService
@inject CartService CartService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>@(beverage != null ? GetBeverageName(beverage) : LanguageService.GetText("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "Product")) - BUBBLICIOUS</PageTitle>

<div class="product-detail-container">
    <div class="language-toggle-container">
        <LanguageToggle />
    </div>

    @if (beverage != null)
    {
        <div class="product-detail-content">
            <div class="product-image-section">
                <img src="@beverage.ImageUrl" alt="@GetBeverageName(beverage)" class="product-image" onerror="this.src='/img/default-beverage.svg'" />
                @if (beverage.IsVegetarian)
                {
                    <div class="vegetarian-badge-large">üå± @LanguageService.GetText("‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥", "Vegetarian")</div>
                }
            </div>

            <div class="product-info-section">
                <h1 class="product-name">@GetBeverageName(beverage)</h1>
                <p class="product-description">@GetBeverageDescription(beverage)</p>
                <p class="base-price">@LanguageService.GetText("‡∏£‡∏≤‡∏Ñ‡∏≤", "Price"): ‡∏ø@beverage.Price</p>

                <div class="customization-section">
                    <h3>@LanguageService.GetText("‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á", "Toppings")</h3>
                    <div class="toppings-grid">
                        @foreach (var topping in availableToppings)
                        {
                            <label class="topping-item">
                                <input type="checkbox" @onchange="(e) => ToggleTopping(topping, (bool)e.Value!)" />
                                <span class="topping-name">@GetToppingName(topping)</span>
                                <span class="topping-price">+‡∏ø@topping.Price</span>
                            </label>
                        }
                    </div>

                    <div class="customization-row">
                        <label>@LanguageService.GetText("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô", "Sweetness Level")</label>
                        <select @bind="selectedSweetnessLevel" class="custom-select">
                            <option value="@SweetnessLevel.None">0%</option>
                            <option value="@SweetnessLevel.Quarter">25%</option>
                            <option value="@SweetnessLevel.Half">50%</option>
                            <option value="@SweetnessLevel.ThreeQuarter">75%</option>
                            <option value="@SweetnessLevel.Full">100%</option>
                        </select>
                    </div>

                    <div class="customization-row">
                        <label>@LanguageService.GetText("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", "Ice Level")</label>
                        <select @bind="selectedIceLevel" class="custom-select">
                            <option value="@IceLevel.None">@LanguageService.GetText("‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà", "No Ice")</option>
                            <option value="@IceLevel.Light">@LanguageService.GetText("‡∏ô‡πâ‡∏≠‡∏¢", "Light")</option>
                            <option value="@IceLevel.Normal">@LanguageService.GetText("‡∏õ‡∏Å‡∏ï‡∏¥", "Normal")</option>
                            <option value="@IceLevel.Extra">@LanguageService.GetText("‡πÄ‡∏¢‡∏≠‡∏∞", "Extra")</option>
                        </select>
                    </div>

                    <div class="quantity-section">
                        <label>@LanguageService.GetText("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "Quantity")</label>
                        <div class="quantity-controls">
                            <button class="quantity-btn" @onclick="DecreaseQuantity" disabled="@(quantity <= 1)">-</button>
                            <span class="quantity-display">@quantity</span>
                            <button class="quantity-btn" @onclick="IncreaseQuantity">+</button>
                        </div>
                    </div>

                    <div class="price-summary">
                        <div class="price-breakdown">
                            <span>@LanguageService.GetText("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "Beverage"): ‡∏ø@beverage.Price</span>
                            @if (selectedToppings.Any())
                            {
                                <span>@LanguageService.GetText("‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á", "Toppings"): ‡∏ø@selectedToppings.Sum(t => t.Price)</span>
                            }
                            <span>@LanguageService.GetText("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "Quantity"): @quantity</span>
                        </div>
                        <div class="total-price">
                            @LanguageService.GetText("‡∏£‡∏ß‡∏°", "Total"): ‡∏ø@CalculateTotalPrice()
                        </div>
                    </div>

                    <div class="action-buttons">
                        <button class="btn-secondary" @onclick="GoBack">
                            @LanguageService.GetText("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", "Back")
                        </button>
                        <button class="btn-primary" @onclick="AddToCart">
                            @LanguageService.GetText("‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", "Add to Cart")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="not-found">
            <h2>@LanguageService.GetText("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "Product Not Found")</h2>
            <button class="btn-primary" @onclick="GoBack">
                @LanguageService.GetText("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π", "Back to Menu")
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public int BeverageId { get; set; }

    private BeverageItem? beverage;
    private List<Topping> availableToppings = new();
    private List<Topping> selectedToppings = new();
    private SweetnessLevel selectedSweetnessLevel = SweetnessLevel.Half;
    private IceLevel selectedIceLevel = IceLevel.Normal;
    private int quantity = 1;

    protected override void OnInitialized()
    {
        LanguageService.LanguageChanged += StateHasChanged;
        beverage = BeverageService.GetBeverageById(BeverageId);
        availableToppings = BeverageService.GetAllToppings();
    }

    protected override void OnParametersSet()
    {
        beverage = BeverageService.GetBeverageById(BeverageId);
    }

    private string GetBeverageName(BeverageItem bev)
    {
        return LanguageService.CurrentLanguage == Language.Thai ? bev.NameThai : bev.NameEnglish;
    }

    private string GetBeverageDescription(BeverageItem bev)
    {
        return LanguageService.CurrentLanguage == Language.Thai ? bev.DescriptionThai : bev.DescriptionEnglish;
    }

    private string GetToppingName(Topping topping)
    {
        return LanguageService.CurrentLanguage == Language.Thai ? topping.NameThai : topping.NameEnglish;
    }

    private void ToggleTopping(Topping topping, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedToppings.Any(t => t.Id == topping.Id))
            {
                selectedToppings.Add(topping);
            }
        }
        else
        {
            selectedToppings.RemoveAll(t => t.Id == topping.Id);
        }
        StateHasChanged();
    }

    private void IncreaseQuantity()
    {
        quantity++;
    }

    private void DecreaseQuantity()
    {
        if (quantity > 1)
        {
            quantity--;
        }
    }

    private decimal CalculateTotalPrice()
    {
        if (beverage == null) return 0;
        
        var basePrice = beverage.Price;
        var toppingsPrice = selectedToppings.Sum(t => t.Price);
        return (basePrice + toppingsPrice) * quantity;
    }

    private void AddToCart()
    {
        if (beverage == null) return;

        var cartItem = new CartItem
        {
            Beverage = beverage,
            SelectedToppings = selectedToppings.ToList(),
            SweetnessLevel = selectedSweetnessLevel,
            IceLevel = selectedIceLevel,
            Quantity = quantity
        };

        CartService.AddToCart(cartItem);
        Navigation.NavigateTo("/cart");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/menu");
    }

    public void Dispose()
    {
        LanguageService.LanguageChanged -= StateHasChanged;
    }
}