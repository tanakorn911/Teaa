@rendermode @(AppDomain.CurrentDomain.FriendlyName.Contains("Tea.Web") ? Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveServer : null)
@page "/qr-payment"
@using Tea.Shared.Services
@using Tea.Shared.Models
@using Tea.Shared.Components
@inject LanguageService LanguageService
@inject CartService CartService
@inject PaymentService PaymentService
@inject NavigationManager Navigation
@implements IDisposable


<PageTitle>@LanguageService.GetText("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô - BUBBLICIOUS", "Payment - BUBBLICIOUS")</PageTitle>

<div class="payment-container">
    <div class="language-toggle-container">
        <LanguageToggle />
    </div>

    <div class="payment-header">
        <h1 class="payment-title">@LanguageService.GetText("‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", "Scan QR Code to Pay")</h1>
        <button class="btn-secondary" @onclick="GoBackToCart">
            @LanguageService.GetText("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", "Back to Cart")
        </button>
    </div>

    @if (!cartItems.Any())
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>@LanguageService.GetText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤...", "Checking cart...")</p>
        </div>
    }
    else if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>@LanguageService.GetText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...", "Generating QR Code...")</p>
        </div>
    }
    else if (charge != null && charge.Source?.ScannableCode?.Image != null)
    {
        <div class="qr-payment-content">
            <div class="order-summary">
                <h3>@LanguageService.GetText("‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "Order Summary")</h3>
                <div class="summary-items">
                    @foreach (var item in cartItems)
                    {
                        <div class="summary-item">
                            <span class="item-name">@GetBeverageName(item.Beverage) √ó @item.Quantity</span>
                            <span class="item-price">‡∏ø@item.TotalPrice</span>
                        </div>
                    }
                </div>
                <div class="total-amount">
                    <strong>@LanguageService.GetText("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:", "Total:") ‡∏ø@totalAmount</strong>
                </div>
            </div>

            <div class="qr-code-section">
                <div class="qr-code-container">
                    <img src="@charge.Source.ScannableCode.Image.DownloadUri" 
                         alt="PromptPay QR Code" 
                         class="qr-code-image" />
                </div>
                
                <div class="payment-instructions">
                    <h4>@LanguageService.GetText("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", "Payment Instructions")</h4>
                    <ol>
                        <li>@LanguageService.GetText("‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ PromptPay", "Open your banking app or PromptPay app")</li>
                        <li>@LanguageService.GetText("‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô", "Scan the QR Code above")</li>
                        <li>@LanguageService.GetText("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", "Confirm the payment")</li>
                        <li>@LanguageService.GetText("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", "Wait for system confirmation")</li>
                    </ol>
                </div>
            </div>

            <div class="payment-status">
                @if (paymentStatus == "pending")
                {
                    <div class="status-pending">
                        <div class="status-icon">‚è≥</div>
                        <p>@LanguageService.GetText("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...", "Waiting for payment...")</p>
                        <div class="countdown">
                            @LanguageService.GetText("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô:", "Expires in:") @timeRemaining
                        </div>
                        <button class="btn-test-success" @onclick="SimulatePaymentSuccess">
                            @LanguageService.GetText("üß™ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)", "üß™ Skip Payment (Test)")
                        </button>
                    </div>
                }
                else if (paymentStatus == "successful")
                {
                    <div class="status-success">
                        <div class="status-icon">‚úÖ</div>
                        <p>@LanguageService.GetText("‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "Payment Successful!")</p>
                        <button class="btn-primary" @onclick="GoToOrderSuccess">
                            @LanguageService.GetText("‡∏î‡∏π‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", "View Receipt")
                        </button>
                    </div>
                }
                else if (paymentStatus == "failed")
                {
                    <div class="status-failed">
                        <div class="status-icon">‚ùå</div>
                        <p>@LanguageService.GetText("‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "Payment Failed")</p>
                        <button class="btn-primary" @onclick="RetryPayment">
                            @LanguageService.GetText("‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "Try Again")
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-container">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3>@LanguageService.GetText("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "An Error Occurred")</h3>
            <p>@LanguageService.GetText("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "Unable to generate QR Code. Please try again.")</p>
            <button class="btn-primary" @onclick="RetryPayment">
                @LanguageService.GetText("‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "Try Again")
            </button>
        </div>
    }
</div>

@code {
    private List<CartItem> cartItems = new();
    private decimal totalAmount;
    private OmiseCharge? charge;
    private bool isLoading = true;
    private bool hasError = false;
    private string paymentStatus = "pending";
    private string timeRemaining = "";
    private Timer? statusTimer;
    private Timer? countdownTimer;
    private DateTime expiryTime;

    protected override async Task OnInitializedAsync()
    {
        LanguageService.LanguageChanged += StateHasChanged;
        cartItems = CartService.GetCartItems();
        totalAmount = CartService.GetCartTotal();

        if (cartItems.Any())
        {
            await CreatePaymentAsync();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !cartItems.Any())
        {
            Navigation.NavigateTo("/cart");
        }
    }

    private async Task CreatePaymentAsync()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            var description = LanguageService.GetText(
                $"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {cartItems.Count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                $"Order of {cartItems.Count} items"
            );

            charge = await PaymentService.CreatePromptPayChargeAsync(totalAmount, description);

            if (charge != null && charge.Source?.ScannableCode?.Image != null)
            {
                expiryTime = DateTime.UtcNow.AddMinutes(5); // Set 5 minutes limit
                StartStatusPolling();
                StartCountdownTimer();
            }
            else
            {
                hasError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating payment: {ex.Message}");
            hasError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartStatusPolling()
    {
        statusTimer = new Timer(async _ => await CheckPaymentStatus(), null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private void StartCountdownTimer()
    {
        countdownTimer = new Timer(_ => UpdateCountdown(), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task CheckPaymentStatus()
    {
        if (charge?.Id == null || paymentStatus != "pending") return;

        try
        {
            var updatedCharge = await PaymentService.GetChargeStatusAsync(charge.Id);
            if (updatedCharge != null)
            {
                if (updatedCharge.Paid)
                {
                    paymentStatus = "successful";
                    statusTimer?.Dispose();
                    countdownTimer?.Dispose();
                    await InvokeAsync(StateHasChanged);
                }
                else if (updatedCharge.Status == "failed" || DateTime.UtcNow > expiryTime)
                {
                    paymentStatus = "failed";
                    statusTimer?.Dispose();
                    countdownTimer?.Dispose();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking payment status: {ex.Message}");
        }
    }

    private void UpdateCountdown()
    {
        var remaining = expiryTime - DateTime.UtcNow;
        if (remaining.TotalSeconds <= 0)
        {
            timeRemaining = "00:00";
            if (paymentStatus == "pending")
            {
                paymentStatus = "failed";
                statusTimer?.Dispose();
                countdownTimer?.Dispose();
                InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            timeRemaining = $"{remaining.Minutes:D2}:{remaining.Seconds:D2}";
            InvokeAsync(StateHasChanged);
        }
    }

    private string GetBeverageName(BeverageItem beverage)
    {
        return LanguageService.CurrentLanguage == Language.Thai ? beverage.NameThai : beverage.NameEnglish;
    }

    private void GoBackToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private async Task RetryPayment()
    {
        paymentStatus = "pending";
        statusTimer?.Dispose();
        countdownTimer?.Dispose();
        await CreatePaymentAsync();
    }

    private void SimulatePaymentSuccess()
    {
        paymentStatus = "successful";
        statusTimer?.Dispose();
        countdownTimer?.Dispose();
        StateHasChanged();
    }

    private void GoToOrderSuccess()
    {
        CartService.ClearCart();
        Navigation.NavigateTo("/order-success");
    }

    public void Dispose()
    {
        LanguageService.LanguageChanged -= StateHasChanged;
        statusTimer?.Dispose();
        countdownTimer?.Dispose();
    }
}